diff --git a/CMakeLists.txt b/CMakeLists.txt
index 13aff5f4b..09835d61a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -99,11 +99,11 @@ include_directories(${CURL_SOURCE_DIR}/include)
 option(CURL_WERROR "Turn compiler warnings into errors" OFF)
 option(PICKY_COMPILER "Enable picky compiler options" ON)
 option(BUILD_CURL_EXE "Set to ON to build curl executable." ON)
-option(BUILD_SHARED_LIBS "Build shared libraries" ON)
+option(BUILD_SHARED_LIBS "Build shared libraries" OFF)
 option(ENABLE_ARES "Set to ON to enable c-ares support" OFF)
 if(WIN32)
-  option(CURL_STATIC_CRT "Set to ON to build libcurl with static CRT on Windows (/MT)." OFF)
-  option(ENABLE_UNICODE "Set to ON to use the Unicode version of the Windows API functions" OFF)
+  option(CURL_STATIC_CRT "Set to ON to build libcurl with static CRT on Windows (/MT)." ON)
+  option(ENABLE_UNICODE "Set to ON to use the Unicode version of the Windows API functions" ON)
   set(CURL_TARGET_WINDOWS_VERSION "" CACHE STRING "Minimum target Windows version as hex string")
   if(CURL_TARGET_WINDOWS_VERSION)
     add_definitions(-D_WIN32_WINNT=${CURL_TARGET_WINDOWS_VERSION})
@@ -117,7 +117,7 @@ if(WIN32)
     endif()
   endif()
 endif()
-option(CURL_LTO "Turn on compiler Link Time Optimizations" OFF)
+option(CURL_LTO "Turn on compiler Link Time Optimizations" ON)
 
 cmake_dependent_option(ENABLE_THREADED_RESOLVER "Set to ON to enable threaded DNS lookup"
         ON "NOT ENABLE_ARES"
@@ -519,16 +519,17 @@ endif()
 
 function(CheckQuicSupportInOpenSSL)
   # Be sure that the OpenSSL library actually supports QUIC.
-  if(NOT DEFINED HAVE_SSL_CTX_SET_QUIC_METHOD)
-    cmake_push_check_state()
-    set(CMAKE_REQUIRED_INCLUDES   "${OPENSSL_INCLUDE_DIR}")
-    set(CMAKE_REQUIRED_LIBRARIES  "${OPENSSL_LIBRARIES}")
-    check_symbol_exists(SSL_CTX_set_quic_method "openssl/ssl.h" HAVE_SSL_CTX_SET_QUIC_METHOD)
-    cmake_pop_check_state()
-  endif()
-  if(NOT HAVE_SSL_CTX_SET_QUIC_METHOD)
-    message(FATAL_ERROR "QUIC support is missing in OpenSSL/BoringSSL. Try setting -DOPENSSL_ROOT_DIR")
-  endif()
+  message(STATUS "disable quic support check")
+  # if(NOT DEFINED HAVE_SSL_CTX_SET_QUIC_METHOD)
+  #   cmake_push_check_state()
+  #   set(CMAKE_REQUIRED_INCLUDES   "${OPENSSL_INCLUDE_DIR}")
+  #   set(CMAKE_REQUIRED_LIBRARIES  "${OPENSSL_LIBRARIES}")
+  #   check_symbol_exists(SSL_CTX_set_quic_method "openssl/ssl.h" HAVE_SSL_CTX_SET_QUIC_METHOD)
+  #   cmake_pop_check_state()
+  # endif()
+  # if(NOT HAVE_SSL_CTX_SET_QUIC_METHOD)
+  #   message(FATAL_ERROR "QUIC support is missing in OpenSSL/BoringSSL. Try setting -DOPENSSL_ROOT_DIR")
+  # endif()
 endfunction()
 
 option(USE_NGTCP2 "Use ngtcp2 and nghttp3 libraries for HTTP/3 support" OFF)
@@ -726,17 +727,21 @@ if(ZLIB_FOUND)
   list(APPEND CMAKE_REQUIRED_INCLUDES ${ZLIB_INCLUDE_DIRS})
 endif()
 
-option(CURL_BROTLI "Set to ON to enable building curl with brotli support." OFF)
-set(HAVE_BROTLI OFF)
-if(CURL_BROTLI)
-  find_package(Brotli QUIET)
-  if(BROTLI_FOUND)
-    set(HAVE_BROTLI ON)
-    list(APPEND CURL_LIBS ${BROTLI_LIBRARIES})
-    include_directories(${BROTLI_INCLUDE_DIRS})
-    list(APPEND CMAKE_REQUIRED_INCLUDES ${BROTLI_INCLUDE_DIRS})
-  endif()
-endif()
+# option(CURL_BROTLI "Set to ON to enable building curl with brotli support." OFF)
+# set(HAVE_BROTLI OFF)
+# if(CURL_BROTLI)
+#   find_package(Brotli QUIET)
+#   if(BROTLI_FOUND)
+#     set(HAVE_BROTLI ON)
+#     list(APPEND CURL_LIBS ${BROTLI_LIBRARIES})
+#     include_directories(${BROTLI_INCLUDE_DIRS})
+#     list(APPEND CMAKE_REQUIRED_INCLUDES ${BROTLI_INCLUDE_DIRS})
+#   endif()
+# endif()
+
+# Force enable brotli
+set(HAVE_BROTLI ON)
+list(APPEND CURL_LIBS brotli)
 
 option(CURL_ZSTD "Set to ON to enable building curl with zstd support." OFF)
 set(HAVE_ZSTD OFF)
diff --git a/src/curl.rc b/src/curl.rc
index b0e328798..500ba5bd7 100644
--- a/src/curl.rc
+++ b/src/curl.rc
@@ -26,6 +26,8 @@
 
 LANGUAGE  0, 0
 
+ICONAPP ICON "curl.ico"
+
 #define RC_VERSION  CURL_VERSION_MAJOR, CURL_VERSION_MINOR, CURL_VERSION_PATCH, 0
 
 VS_VERSION_INFO VERSIONINFO
